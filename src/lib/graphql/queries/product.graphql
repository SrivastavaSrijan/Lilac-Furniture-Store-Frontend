query AllCategories($if: Boolean = false, $orderBy: [CategoryOrderByInput!]=[
    {
      name: asc
    }
  ]) {
  categories(orderBy: $orderBy) {
    slug
    name @include(if: $if)
  }
}
query CategoryBySlug($where: CategoryWhereUniqueInput!) {
  category(where: $where) {
    slug
    name
    description
    image {
      publicUrlTransformed
    }
    productsCount
  }
}

query AllProducts {
  products {
    slug
  }
}
query ProductBySlug($where: ProductWhereUniqueInput!) {
  product(where: $where) {
    category {
      name
    }
    name
    style
    type
    image {
      image {
        publicUrlTransformed
      }
    }
    description
    company
    slug
    variants {
      color
      id
      material
      price
      size
      variant
    }
  }
}

query ProductReviewsBySlug($where: ProductWhereUniqueInput!, $orderBy: [ReviewOrderByInput!]!) {
  product(where: $where) {
    reviews(orderBy: $orderBy) {
      author 
      id
      content
      createdAt
      rating
    }
  }
}

mutation CreateReview($data: ReviewCreateInput!) {
  createReview(data: $data) {
    id
  }
}

query GetPriceRange {
   getPriceRange {
    max
    min
  }
}
query ProductWhereCount($where: ProductWhereInput) {
  productsCount(where: $where)
}
query PaginatedProducts($limit: Int, $skip: Int, $cursor: ProductWhereUniqueInput, $where: ProductWhereInput, $includeDesc: Boolean = false, $orderBy: [ProductOrderByInput!]) {
  products(take: $limit, skip: $skip, cursor: $cursor, where: $where, orderBy: $orderBy) {
    id
    slug
    image {
      image {
        publicUrlTransformed
      }
    }
    variant {
      price
      id
    }
    name
    style
    company
    type
    description @include(if: $includeDesc)
  }
  productsCount(where: $where)
}

query ProductsWhere($where: ProductWhereInput!, $includeDesc: Boolean = false, $take: Int) {
  products(where: $where, take: $take) {
    id
    slug
    image {
      image {
        publicUrlTransformed
      }
    }
    variant {
      price
      id
    }
    name
    style
    company
    type
    description @include(if: $includeDesc)
  }
}

mutation AddToCart($id: ID!) {
  addToCart(id: $id) {
    variant {
      product {
        id
      }
    }
  }
}

mutation UpdateCartItem($where: CartItemWhereUniqueInput!, $data: CartItemUpdateInput!) {
  updateCartItem(where: $where, data: $data) {
    quantity
  }
}

mutation DeleteCartItem($where: CartItemWhereUniqueInput!) {
  deleteCartItem(where: $where) {
    id
  }
}

query SearchProducts($searchTerm: String!, $limit: Int, $offset: Int) {
  products(
    where: {
      OR: [
        { name: { contains: $searchTerm, mode: insensitive } },
        { type: { contains: $searchTerm, mode: insensitive } },
        { style: { contains: $searchTerm, mode: insensitive } },
        { company: { contains: $searchTerm, mode: insensitive } },
      ]
    },
    take: $limit,
    skip: $offset
  ) {
    id
    name
    shortDescription
    type
    image {
      image {
        publicUrlTransformed
      }
    }
    style
    company
    variant {
      price
      id
    }
    category {
      id
      name
    }
    # Include other fields as needed
  }
}

query ProductDescriptors($take: Int, $skip: Int) {
  getAllProductDescriptors(take: $take, skip: $skip) {
    companies
    styles
    types
  }
  categories(take: $take, skip: $skip) {
    name
    slug
  }
}